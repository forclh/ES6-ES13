为什么需要Module模块？
	JavaScript一直没有模块体系，无法将一个大程序拆分成互相依赖的小文件，更用简单的方法拼装起来。
ES6模块带来的好处
	避免变量污染，命名冲突
	提高代码的复用率、维护性
	依赖关系管理
模块功能主要由两个命令构成：
	export命令：用于规定模块的对外接口
	        外部能够读取模块内部的某个变量
	                输出变量
	                输出函数或类
	                使用as关键字重命名
	   export命令可以出现在模块的任何位置，只要处于模块顶层即可，除了块作用域内（import也是如此）
	import命令：用于输入其他模块提供的功能
	    输入变量或函数
	    使用as关键字将输入的变量重命名
	    输入的变量都是只读的
	  import命令具有提升效果

模块的整体加载
	用（*）指定一个对象，所有输出值都加载到这个对象上面 

为模块指定默认输出
          使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载
	export default
	
export与import的复合使用
	如果在一个模块中，先输入后输出同一个模块，import语句可以与export语句写在一起


Module的加载实现-浏览器加载
	加载规则：
		在浏览器加载ES6模块，也使用<script>标签，但是要加入type=module属性
		例如：<script type="module" src="./mysc.js"> </script>
		
Module的加载实现-Node加载
	Node要求ES6模块采用.mjs后缀文件名
	目前还在试验阶段，安装Node v8.5.0 + , 
	使用--experimental-modules参数打开该功能
	$ node --experimental-module myjs.mjs